@using Microsoft.AspNetCore.Identity
@using LatiumMarketplace.Models

@inject UserManager<ApplicationUser> UserManager

<!DOCTYPE html>
<html>
<head>
    <script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-2.2.0.min.js"></script>
    <script src="https://ajax.aspnetcdn.com/ajax/signalr/jquery.signalr-2.2.0.min.js"></script>
    <script src="/signalr/hubs"></script>

    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - LatiumMarketplace</title>

    <environment names="Development">
        <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.css" />
        <link rel="stylesheet" href="~/css/site.css" />
    </environment>
    <environment names="Staging,Production">
        <link rel="stylesheet" href="https://ajax.aspnetcdn.com/ajax/bootstrap/3.3.6/css/bootstrap.min.css"
              asp-fallback-href="~/lib/bootstrap/dist/css/bootstrap.min.css"
              asp-fallback-test-class="sr-only" asp-fallback-test-property="position" asp-fallback-test-value="absolute" />
        <link rel="stylesheet" href="~/css/site.min.css" asp-append-version="true" />
    </environment>
</head>
<body>
    <div id="NotificationDiv"></div>
    
    @if (@User.Identity.Name != null)
    {
        <script>
            function checkBan()
            {
                $.ajax({
                    url: '@Url.Action("CheckIfBanned", "AccountAPI")',
                    type: "POST",
                    data: JSON.stringify('@User.Identity.Name'),
                    contentType: "application/json",
                    success: function (isBanned) {
                        if(isBanned)
                        {
                            console.log("You have been banned.");
                            // similar behavior as an HTTP redirect
                            window.location.replace("@Url.Action("Index", "Home")");
                        }
                        else
                        {
                            console.log("You are not banned.");
                        }
                    },
                    error: function (error) {
                        console.log(error)
                        var x = error; //break here for debugging.
                    }
                });
            }


            var messageNotificationCount = 0;
            var offersNotificationCount = 0;
            var bidNotificationCount = 0;

            function updateMessageNotificationCount()
            {
                $.ajax({
                    url: '@Url.Action("GetMessageNotificationCount", "MessageThreadAPI")',
                    type: "POST",
                    async: false,
                    contentType: "application/json",
                    data: JSON.stringify('@User.Identity.Name'),
                    success: function (messageCount) {
                        messageNotificationCount = messageCount;
                        $('#messageNotificationCount').html(messageNotificationCount);
                        if (messageNotificationCount == 0) {
                            $('#messageNotificationCount').hide();
                        }
                        else {
                            $('#messageNotificationCount').show();
                        }
                    },
                    error: function (error) {
                        console.log(error)
                        var x = error; //break here for debugging.
                    }
                });
            }

            function updateOfferNotificationCount()
            {
                $.ajax({
                    url: '@Url.Action("GetAssetOwnerNotificationCount", "BidsAPI")',
                    type: "POST",
                    async: false,
                    contentType: "application/json",
                    data: JSON.stringify('@User.Identity.Name'),
                    success: function (count) {
                        offersNotificationCount = count;
                        $('#offersNotificationCount').html(offersNotificationCount);
                        if (offersNotificationCount == 0) {
                            $('#offersNotificationCount').hide();
                        }
                        else {
                            $('#offersNotificationCount').show();
                        }
                    },
                    error: function (error) {
                        console.log(error)
                        var x = error; //break here for debugging.
                    }
                });
            }

            function updateBidNotificationCount() {
                $.ajax({
                    url: '@Url.Action("GetBidderNotificationCount", "BidsAPI")',
                    type: "POST",
                    async: false,
                    contentType: "application/json",
                    data: JSON.stringify('@User.Identity.Name'),
                    success: function (count) {
                        bidNotificationCount = count;
                        $('#bidsNotificationCount').html(bidNotificationCount);
                        if (bidNotificationCount == 0) {
                            $('#bidsNotificationCount').hide();
                        }
                        else {
                            $('#bidsNotificationCount').show();
                        }
                    },
                    error: function (error) {
                        console.log(error)
                        var x = error; //break here for debugging.
                    }
                });
            }

            function updateOverallNotificationCount()
            {
                updateMessageNotificationCount();
                updateOfferNotificationCount();
                updateBidNotificationCount();
                var totalNotifications = messageNotificationCount + bidNotificationCount + offersNotificationCount;
                console.log("TotalNotifications: ");
                console.log(totalNotifications);
                $('#overallNotificationCount').html(totalNotifications);
                if (totalNotifications == 0) {
                    $('#overallNotificationCount').hide();
                }
                else {
                    $('#overallNotificationCount').show();
                }

            }
            @*var counts = hub.server.getNotificationCounts('@User.Identity.Name').done(function (counts) {
                console.log("Success");
                console.log(counts);
                var totalNotifications = counts.unreadMessages + counts.unseenBids;
                if (totalNotifications != 0)
                {
                    $('#overallNotificationCount').html(counts.unreadMessages + counts.unseenBids);
                }
                if (counts.unreadMessages != 0)
                {
                    $('#messageNotificationCount').html(counts.unreadMessages);
                }
                if (counts.unseenBids != 0) {
                    $('#bidsNotificationCount').html(counts.unreadMessages);
                }
            }).fail(function (error) {
                console.log('Invocation of GetNotificationCounts failed. Error: ' + error);
            });*@

            var notificationArray = new Array();
            function addNotificationToQueue(notification)
            {
                notificationArray.push(notification);
                updateNotificationBar();
                if (notification.type == 0)
                {
                    updateMessageNotificationCount();
                }
                else
                {
                    updateBidNotificationCount();
                }
            }

            function updateNotificationBar()
            {
                console.log("In update notification.")

                var notificationPresent = $("#NotificationDiv").children().length;
                if (notificationPresent == 0 && notificationArray.length > 0)
                {
                    presentNotification(notificationArray.pop());
                }
            }

            function removeNotification()
            {
                console.log("In remove notification.")
                $("#NotificationDiv").empty();
                updateNotificationBar();
            }

            function presentNotification(notification) {
                console.log(notification);
                if (notification.type == 0)
                {
                    $("#NotificationDiv").append('<div class="alert alert-info alert-dismissable"><a onclick="removeNotification()" class="close" data-dismiss="alert" aria-label="close">&times;</a><strong>New Message:</strong>' + notification.header + '<a href="' + notification.redirectUrl + '" class="alert-link">Read this message!</a></div>');
                }
                else if(notification.type == 1)
                {
                    $("#NotificationDiv").append('<div class="alert alert-success alert-dismissable"><a onclick="removeNotification()" class="close" data-dismiss="alert" aria-label="close">&times;</a><strong>New Bid:</strong>' + notification.header + '<a href="' + notification.redirectUrl + '" class="alert-link">Review this bid!</a></div>');
                }
            }

            // Connect to the broadcaster on the server
            var hub = $.connection.broadcaster;

            // A function we will call from the server
            $.connection.broadcaster.client.addNotificationToQueue = addNotificationToQueue;
            $.connection.broadcaster.client.updateOverallNotificationCount = updateOverallNotificationCount;
            $.connection.broadcaster.client.checkBan = checkBan;
            $.connection.hub.logging = true;

            $.connection.hub.start().done(function (signalr) {
                console.log('Connected!');
                console.log('SignalR object: ', signalr);
                // The subscribe method lets you subscribe to a specific method on the server
                // You could use this method to subscribe to a specific chatroom,
                // listen for updates to a specific resource, or whatever you would want to "subscribe" to.
                hub.server.subscribe('@User.Identity.Name');
                checkBan();
                updateOverallNotificationCount();
            }).fail(function (error) {
                // Just in case we fail to connect
                console.log('Failed to start connection! Error: ', error);
            });

        </script>
    }
    <div class="navbar navbar-inverse navbar-fixed-top">
        <div class="container">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                <a asp-area="" asp-controller="Home" asp-action="Index" class="navbar-brand">LatiumMarketplace</a>
            </div>
            <div class="navbar-collapse collapse">
                <ul class="nav navbar-nav">
                    <li><a asp-area="" asp-controller="Home" asp-action="Index">Home</a></li>
                    <li><a asp-area="" asp-controller="Home" asp-action="About">About</a></li>
                    <li><a asp-area="" asp-controller="Home" asp-action="Contact">Contact</a></li>
                    <li><a asp-area="" asp-controller="Assets" asp-action="Index">Marketplace</a></li>

                    @if (User.IsInRole("Administrator"))
                    {
                        <li><a asp-area="" asp-controller="Admin" asp-action="Index">Admin</a></li>
                    }
                </ul>
                @await Html.PartialAsync("_LoginPartial")
            </div>
        </div>
    </div>
    @RenderSection("jumbotron", false)
    <div class="container body-content">
        @RenderBody()
        <hr />
        <footer>
            <p>&copy; 2017 - LatiumMarketplace</p>
        </footer>
    </div>

    <environment names="Development">
        <script src="~/lib/jquery/dist/jquery.js"></script>
        <script src="~/lib/bootstrap/dist/js/bootstrap.js"></script>
        <script src="~/js/site.js" asp-append-version="true"></script>
        <script src="~/lib/cropit/dist/jquery.cropit.js"></script>
        <script src="~/lib/matchHeight/dist/jquery.matchHeight.js"></script>
    </environment>
    <environment names="Staging,Production">
        <script src="https://ajax.aspnetcdn.com/ajax/jquery/jquery-2.2.0.min.js"
                asp-fallback-src="~/lib/jquery/dist/jquery.min.js"
                asp-fallback-test="window.jQuery">
        </script>
        <script src="https://ajax.aspnetcdn.com/ajax/bootstrap/3.3.6/bootstrap.min.js"
                asp-fallback-src="~/lib/bootstrap/dist/js/bootstrap.min.js"
                asp-fallback-test="window.jQuery && window.jQuery.fn && window.jQuery.fn.modal">
        </script>
        <script src="~/js/site.min.js" asp-append-version="true"></script>
        <script src="~/lib/cropit/dist/jquery.cropit.js"></script>
        <script src="~/lib/matchHeight/dist/jquery.matchHeight.js"></script>

    </environment>
    @RenderSection("scripts", required: false)
</body>
</html>
